##|TYPE Template
##|UNIQUEID 32b5ead1-4a68-4a78-95c5-188cb0f20697
##|TITLE Untitled
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE None
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|GUI_BEGIN

public class GeneratedGui : DotNetScriptGui
{
	public GeneratedGui(ZeusContext context) : base(context) {}

	//-----------------------------------------
	// The User Interface Entry Point
	//-----------------------------------------
	public override void Setup()
	{
		// ** UNCOMMENT CODE BELOW TO SEE UI **

		//ui.Width  = 100;
		//ui.Height = 100;
		//GuiLabel lblDemo = ui.AddLabel("lblDemo", "Demo", "Demo Tooltip");
		//ui.ShowGui = true;
	}

}
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%#DEBUG%><%#REFERENCE System.dll%><%#NAMESPACE System.IO,System.Collections.Generic,System.Text.RegularExpressions%><%
public class GeneratedTemplate : DotNetScriptTemplate
{
	public GeneratedTemplate(ZeusContext context) : base(context) {}

	public int GetColumnDataLengh(IColumn col)
    {
        string dataTypeNameComplete = col.DataTypeNameComplete;
        string resultString = null;
        try
        {
            resultString = Regex.Match(dataTypeNameComplete, @"\( *(\d+) *\)").Groups[1].Value;
            return int.Parse(resultString);
        }
        catch (Exception ex)
        {
            if (ColumnDataTypeIsDateTime(col))
            {
                return 12;            
            }
            else if (ColumnDataTypeIsText(col)||ColumnDataTypeIsMediumText(col))
            {
                return int.MaxValue;
            }
            else
            {
                return -1;
            }
        }

    }

	
    public string GetColumnDataType(IColumn column)
    {
        return column.DataTypeName;
    }
	
    public bool ColumnDataTypeIsDateTime(IColumn col)
    {
        string dataType = GetColumnDataType(col);
        return dataType.Equals("DATETIME") || dataType.Equals("TIMESTAMP");
    }

    public bool ColumnDataTypeIsText(IColumn col)
    {
        return GetColumnDataType(col).Equals("TEXT");
    }

    public bool ColumnDataTypeIsVarchar(IColumn col)
    {
        return GetColumnDataType(col).Equals("VARCHAR");
    }
	
    public bool ColumnDataTypeIsMediumText(IColumn col)
    {
        return GetColumnDataType(col).Equals("MEDIUMTEXT");
    }	

    public bool ColumnDataTypeIsInt(IColumn col)
    {
        string dataType = GetColumnDataType(col);
        return (dataType.Equals("INT") || dataType.Equals("INT UNSIGNED"));
    }

	//---------------------------------------------------
	// Render() is where you want to write your logic    
	//---------------------------------------------------
	public override void Render()
	{
		//output.writeln(MyMeta.DefaultDatabase.Name);
		//return;
		//******************* Config Debug mode ******************
		//Comment bellow line of code to disable Debug mode
		//System.Diagnostics.Debugger.Launch();
		//System.Diagnostics.Debugger.Break();
		//****************** End Config Debug mode ***************
		%>
		You can toggle in out of script like this
		<%		
		output.writeln("Hello world.");
		//MyMeta.Connect("MySQL2","Database=test;Data Source=localhost;User Id=root;Password=;");
		foreach(Table table in MyMeta.DefaultDatabase.Tables)
		{
		%>
		<div><%=table.Name%></div>
		<table border = 1>
		<tr>
			<td>Column Name</td>
			<td>IsInPrimaryKey</td>
			<td>IsInForeignKey</td>
			<td>IsAutoKey</td>
			<td>IsComputed</td>
			<td>AutoIncrement</td>
			
			<td>AutoKeySeed</td>
			<td>DataType</td>
			<td>DataTypeName</td>
			<td>DataTypeNameComplete</td>
			<td>ColumnLength</td>
			<td>DbTargetType</td>
			<td>GlobalProperties</td>
			<td>Properties</td>			
			
			<td>AllProperties</td>
			<td>ForeginsKey</td>
			<td>PrimarysKey In Primary</td>
		</tr>
		<%
			foreach(IColumn col in  table.Columns)
			{
			
			
			
		%>
		<tr>
			<td><%=col.Name%></td>
			<td><%=col.IsInPrimaryKey.ToString()%></td>
			<td><%=col.IsInForeignKey.ToString()%></td>
			<td><%=col.IsAutoKey.ToString()%></td>
			<td><%=col.IsComputed.ToString()%></td>			
			<td><%=col.AutoKeyIncrement.ToString()%></td>
			
			<td><%=col.AutoKeySeed.ToString()%></td>
			<td>xx</td>
			<td><%=col.DataTypeName.ToString()%></td>
			<td><%=col.DataTypeNameComplete.ToString()%></td>
			<td><%=GetColumnDataLengh(col).ToString()%></td>
			<td><%=col.DbTargetType.ToString()%></td>
			<td><%=col.GlobalProperties.ToString()%></td>
			<td><%=col.Properties.ToString()%></td>
			<td><%foreach(object obj in col.AllProperties){
				output.write(obj.ToString() + ",");
			}%></td>
			<td><%foreach(IForeignKey obj in col.ForeignKeys){
				foreach(IColumn frCol in obj.ForeignColumns)
				{
					output.write(frCol.Table.Name + "." + frCol.Name + "|");
				}
			}%></td>
			<td><%foreach(IForeignKey obj in col.ForeignKeys){
				foreach(IColumn frCol in obj.PrimaryColumns)
				{
					output.write(frCol.Table.Name + "." + frCol.Name + "|");
				}
			}%></td>
		</tr>
		<%
			}
		%>
		</table>
		<%		
		}
		output.save("c:\\test.html","o");
	}

}
%>
##|BODY_END
