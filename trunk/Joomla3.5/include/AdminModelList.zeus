##|TYPE Function
##|UNIQUEID ddd8d8ac-8310-4647-b43e-37e8fa835518
##|TITLE AdminModelList
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
	public void CreateAdminModelList(string path, string model)
	{		
		ITable table = GetTableFromView(model);
		output.clear();
%><?php
/**
 * @version		$Id: <%=model%>.php 22355 2011-11-07 05:11:58Z github_bot $
 * @package		Joomla.Administrator
 * @subpackage	<%=ComponentName%>
 * @copyright	Copyright (C) 2005 - 2011 Open Source Matters, Inc. All rights reserved.
 * @license		GNU General Public License version 2 or later; see LICENSE.txt
 */

// no direct access
defined('_JEXEC') or die;

jimport('joomla.application.component.modellist');

/**
 * Methods supporting a list of article records.
 *
 * @package		Joomla.Administrator
 * @subpackage	<%=ComponentName%>
 */
class <%=ComponentClassName%>Model<%=model%> extends JModelList
{
	/**
	 * Constructor.
	 *
	 * @param	array	An optional associative array of configuration settings.
	 * @see		JController
	 * @since	1.6
	 */
	public function __construct($config = array())
	{
		if (empty($config['filter_fields'])) {
			$config['filter_fields'] = array(
				<%foreach(IColumn column in table.Columns)
				{
					string columnName = column.Name.ToLower();
				%>'<%=columnName%>', 'a.<%=columnName%>',
				<%}%>
			);
		}

		parent::__construct($config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @return	void
	 * @since	1.6
	 */
	protected function populateState($ordering = null, $direction = null)
	{
		// Initialise variables.
		$app = JFactory::getApplication();
		$session = JFactory::getSession();

		// Adjust the context to support modal layouts.
		if ($layout = JRequest::getVar('layout')) {
			$this->context .= '.'.$layout;
		}

		$search = $this->getUserStateFromRequest($this->context.'.filter.search', 'filter_search');
		$this->setState('filter.search', $search);

		$access = $this->getUserStateFromRequest($this->context.'.filter.access', 'filter_access', 0, 'int');
		$this->setState('filter.access', $access);

		$authorId = $app->getUserStateFromRequest($this->context.'.filter.author_id', 'filter_author_id');
		$this->setState('filter.author_id', $authorId);

		$published = $this->getUserStateFromRequest($this->context.'.filter.published', 'filter_published', '');
		$this->setState('filter.published', $published);

		$categoryId = $this->getUserStateFromRequest($this->context.'.filter.category_id', 'filter_category_id');
		$this->setState('filter.category_id', $categoryId);

		$language = $this->getUserStateFromRequest($this->context.'.filter.language', 'filter_language', '');
		$this->setState('filter.language', $language);

		// List state information.
		<%
		IColumn firstColumn = GetFirstColumn(table);
		string firstColumnName = firstColumn.Name.ToLower();
		%>
		parent::populateState('a.<%=firstColumnName%>', 'asc');
	}

	/**
	 * Method to get a store id based on model configuration state.
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param	string		$id	A prefix for the store id.
	 *
	 * @return	string		A store id.
	 * @since	1.6
	 */
	protected function getStoreId($id = '')
	{
		// Compile the store id.
		$id	.= ':'.$this->getState('filter.search');
		$id	.= ':'.$this->getState('filter.access');
		$id	.= ':'.$this->getState('filter.published');
		$id	.= ':'.$this->getState('filter.category_id');
		$id	.= ':'.$this->getState('filter.author_id');
		$id	.= ':'.$this->getState('filter.language');

		return parent::getStoreId($id);
	}

	/**
	 * Build an SQL query to load the list data.
	 *
	 * @return	JDatabaseQuery
	 * @since	1.6
	 */
	protected function getListQuery()
	{
		// Create a new query object.
		$db		= $this->getDbo();
		$query	= $db->getQuery(true);
		$user	= JFactory::getUser();

		// Select the required fields from the table.
		<%
		string selectfield = string.Empty;
		foreach(IColumn column in table.Columns)
		{
			string columnName = column.Name.ToLower();
			selectfield += "a." + columnName + ",";
		}
		if(selectfield.EndsWith(","))
		{
			selectfield = selectfield.Substring(0, selectfield.Length - 1);
		}
		
		IList<string> columnforJoinList =  DefaultColumnJointWithOtherTable;		
		%>		
		$query->select(	$this->getState("list.select","<%=selectfield%>")	);
		$query->from('#__<%=GetTableName(table).ToLower()%> AS a');
		
		<%foreach(IColumn column in table.Columns)
		{
			if(columnforJoinList.Contains(column.Name.ToLower()))
			{
				continue;
			}
			
			TableJoinItem item = GetTableJoinItemByColumn(column);
			
			if(item!=null && item.TableAliasName!="" && item.TableName!="" && item.TitleName != "" && item.TitleAliasName != "" && item.TableNameNoPrefix !="")
			{

		%>
		// Join over the <%=item.TableName%>
		$query->select('<%=item.TableAliasName%>.<%=item.TitleName%> AS <%=item.TitleAliasName%>');
		$query->join('LEFT', '`<%=item.TableNameNoPrefix%>` AS <%=item.TableAliasName%> ON <%=item.TableAliasName%>.<%=item.PrimaryKey%> = a.<%=column.Name%>');
		<%
			}
		}
		%>
		
				
		// check foreign key and wite join statement
		/**/
		<%
		if(IsContainColumn(table,"language"))
		{
		%>
		// Join over the language
		$query->select('l.title AS language_title');
		$query->join('LEFT', '`#__languages` AS l ON l.lang_code = a.language');
		<%
		}
		%>
		
		<%
		if(IsContainColumn(table,"checked_out"))
		{
		%>
		// Join over the users for the checked out user.
		$query->select('uc.name AS editor');
		$query->join('LEFT', '#__users AS uc ON uc.id=a.checked_out');
		<%
		}
		%>
				
		<%
		if(IsContainColumn(table,"access"))
		{
		%>
		// Join over the asset groups.
		$query->select('ag.title AS access_level');
		$query->join('LEFT', '#__viewlevels AS ag ON ag.id = a.access');
		<%
		}
		%>
		
		<%
		if(IsContainColumn(table,"catid"))
		{
		%>
		// Join over the categories.
		$query->select('c.title AS category_title');
		$query->join('LEFT', '#__categories AS c ON c.id = a.catid');
		<%
		}
		%>

		<%
		if(IsContainColumn(table,"created_by"))
		{
		%>
		// Join over the users for the author.		
		$query->select('ua.name AS author_name');
		$query->join('LEFT', '#__users AS ua ON ua.id = a.created_by');
		<%
		}
		%>

		<%
		if(IsContainColumn(table,"access"))
		{
		%>
		// Filter by access level.
		if ($access = $this->getState('filter.access')) {
			$query->where('a.access = ' . (int) $access);
		}

		// Implement View Level Access
		if (!$user->authorise('core.admin'))
		{
		    $groups	= implode(',', $user->getAuthorisedViewLevels());
			$query->where('a.access IN ('.$groups.')');
		}
		<%
		}
		%>
				
		<%
		if(IsContainColumn(table,"state"))
		{
		%>
		// Filter by published state
		$published = $this->getState('filter.published');
		if (is_numeric($published)) {
			$query->where('a.state = ' . (int) $published);
		}
		elseif ($published === '') {
			$query->where('(a.state = 0 OR a.state = 1)');
		}
		<%
		}
		%>

		<%
		if(IsContainColumn(table,"catid"))
		{
		%>		
		// Filter by a single or group of categories.
		$categoryId = $this->getState('filter.category_id');
		if (is_numeric($categoryId)) {
			$query->where('a.catid = '.(int) $categoryId);
		}
		elseif (is_array($categoryId)) {
			JArrayHelper::toInteger($categoryId);
			$categoryId = implode(',', $categoryId);
			$query->where('a.catid IN ('.$categoryId.')');
		}
		<%
		}
		%>

		<%
		if(IsContainColumn(table,"created_by"))
		{
		%>		
		// Filter by author
		$authorId = $this->getState('filter.author_id');
		if (is_numeric($authorId)) {
			$type = $this->getState('filter.author_id.include', true) ? '= ' : '<>';
			$query->where('a.created_by '.$type.(int) $authorId);
		}
		<%
		}
		%>
		/**/

		// Filter by search in title.
		$search = $this->getState('filter.search');
		if (!empty($search)) {
			if (stripos($search, 'id:') === 0) {
				$query->where('a.id = '.(int) substr($search, 3));
			}
			elseif (stripos($search, 'author:') === 0) {
				$search = $db->Quote('%'.$db->getEscaped(substr($search, 7), true).'%');
				$query->where('(ua.name LIKE '.$search.' OR ua.username LIKE '.$search.')');
			}
			<%
			string searchQuery = BuilQuerySearch(table);
			if(!string.IsNullOrEmpty(searchQuery))
			{
			%>
			else {
				$search = $db->Quote('%'.$db->getEscaped($search, true).'%');
				$query->where(<%=searchQuery%>);
			}
			<%
			}
			%>
		}

		<%
		if(IsContainColumn(table,"language"))
		{
		%>
		// Filter on the language.
		if ($language = $this->getState('filter.language')) {
			$query->where('a.language = '.$db->quote($language));		
		}
		<%
		}
		%>

		// Add the list ordering clause.
		$orderCol	= $this->state->get('list.ordering');
		$orderDirn	= $this->state->get('list.direction');		
		//if ($orderCol == 'a.ordering' || $orderCol == 'category_title') {
		//	$orderCol = 'category_title '.$orderDirn.', a.ordering';
		//}
		if ($orderCol == 'a.ordering') {
			$orderCol = 'a.ordering';
		}
		$query->order($db->getEscaped($orderCol.' '.$orderDirn));

		// echo nl2br(str_replace('#__','jos_',$query));
		return $query;
	}

	/**
	 * Build a list of authors
	 *
	 * @return	JDatabaseQuery
	 * @since	1.6
	 */
	public function getAuthors() {
		// Create a new query object.
		$db = $this->getDbo();
		$query = $db->getQuery(true);

		// Construct the query
		$query->select('u.id AS value, u.name AS text');
		$query->from('#__users AS u');
		$query->join('INNER', '#__content AS c ON c.created_by = u.id');
		$query->group('u.id');
		$query->order('u.name');

		// Setup the query
		$db->setQuery($query->__toString());

		// Return the result
		return $db->loadObjectList();
	}

	/**
	 * Method to get a list of articles.
	 * Overridden to add a check for access levels.
	 *
	 * @return	mixed	An array of data items on success, false on failure.
	 * @since	1.6.1
	 */
	public function getItems()
	{
		$items	= parent::getItems();
		$app	= JFactory::getApplication();
		if ($app->isSite()) {
			$user	= JFactory::getUser();
			$groups	= $user->getAuthorisedViewLevels();

			for ($x = 0, $count = count($items); $x < $count; $x++) {
				//Check the access level. Remove articles the user shouldn't see
				if (!in_array($items[$x]->access, $groups)) {
					unset($items[$x]);
				}
			}
		}
		return $items;
	}
}
<%
		output.save(path, "o");
		output.clear();		
	}
%>
##|BODY_END
