##|TYPE Function
##|UNIQUEID ddd8d8ac-8310-4647-b43e-37e8fa835518
##|TITLE AdminViewList
##|NAMESPACE 
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE C#
##|GUI_ENGINE .Net Script
##|GUI_LANGUAGE C#
##|BODY_MODE Markup
##|BODY_ENGINE .Net Script
##|BODY_LANGUAGE C#
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
	public void CreateAdminViewList(string path, string view)
	{
		ITable table = GetTableFromView(view);
		string tableNameMeaning = GetTableNameWithMeaning(table);
		string tableName = GetTableNameForMultipleLanguage(table);
		tableName = tableName.ToUpper();
		output.clear();
%><?php
 /**
 * @package     Joomla.Administrator
 * @subpackage  <%=ComponentName%>
 *
 * author huuhuy@gmail.com
 * @copyright   Copyright (C) 2005 - 2013 Open Source Matters, Inc. All rights reserved.
 * @license     GNU General Public License version 2 or later; see LICENSE.txt
 */

defined('_JEXEC') or die;

/**
 * View class for a list of articles.
 *
 * @package     Joomla.Administrator
 * @subpackage  com_content
 * @since       1.6
 */
class <%=ComponentClassName%>View<%=view%> extends JViewLegacy
{
	protected $items;
	protected $pagination;
	protected $state;

	/**
	 * Display the view
	 *
	 * @param   string  $tpl  The name of the template file to parse; automatically searches through the template paths.
	 *
	 * @return  void
	 */
	public function display($tpl = null)
	{		
		if ($this->getLayout() !== 'modal')
		{
			<%=ComponentClassName%>Helper::addSubmenu('<%=view.ToLower()%>');
		}		
		
		// Access check. HuyNH add code to check permission for see ther viewer
		if (!JFactory::getUser()->authorise('core.manage', '<%=ComponentName%>.assetview.<%=view.ToLower()%>')) {
			return JError::raiseWarning(404, JText::_('JERROR_ALERTNOAUTHOR'));
		}
		
		$this->items         = $this->get('Items');
		$this->pagination    = $this->get('Pagination');
		$this->state         = $this->get('State');
		$this->authors       = $this->get('Authors');
		$this->filterForm    = $this->get('FilterForm');
		$this->activeFilters = $this->get('ActiveFilters');

		// Check for errors.
		if (count($errors = $this->get('Errors'))) {
			JError::raiseError(500, implode("\n", $errors));
			return false;
		}
		
		// Levels filter.
		$options	= array();
		$options[]	= JHtml::_('select.option', '1', JText::_('J1'));
		$options[]	= JHtml::_('select.option', '2', JText::_('J2'));
		$options[]	= JHtml::_('select.option', '3', JText::_('J3'));
		$options[]	= JHtml::_('select.option', '4', JText::_('J4'));
		$options[]	= JHtml::_('select.option', '5', JText::_('J5'));
		$options[]	= JHtml::_('select.option', '6', JText::_('J6'));
		$options[]	= JHtml::_('select.option', '7', JText::_('J7'));
		$options[]	= JHtml::_('select.option', '8', JText::_('J8'));
		$options[]	= JHtml::_('select.option', '9', JText::_('J9'));
		$options[]	= JHtml::_('select.option', '10', JText::_('J10'));

		$this->f_levels = $options;		

		// We don't need toolbar in the modal window.
		if ($this->getLayout() !== 'modal') {
			$this->addToolbar();
			$this->sidebar = JHtmlSidebar::render();
		}

		parent::display($tpl);
	}

	/**
	 * Add the page title and toolbar.
	 *
	 * @since	1.6
	 */
	protected function addToolbar()
	{
<%
if(IsContainColumn(table,"catid"))
{
%>	
		$canDo	= <%=ComponentClassName%>Helper::getActions($this->state->get('filter.category_id'));
<%
}else
{
%>
		$canDo	= <%=ComponentClassName%>Helper::getActionsBySection("<%=view.ToLower()%>");
<%
}
%>		
		$user	= JFactory::getUser();
		
		// Get the toolbar object instance
		$bar = JToolBar::getInstance('toolbar');
		JToolBarHelper::title(JText::_('<%=ComponentName.ToUpper()%>_<%=tableName%>_TITLE'), 'stack <%=GetEditView(view).ToLower()%>');

		if ($canDo->get('core.create') || (count($user->getAuthorisedCategories('<%=ComponentName%>', 'core.create'))) > 0 ) {
			JToolBarHelper::addNew('<%=GetEditView(view).ToLower()%>.add');
		}

		if (($canDo->get('core.edit')) || ($canDo->get('core.edit.own'))) {
			JToolBarHelper::editList('<%=GetEditView(view).ToLower()%>.edit');
		}

		if ($canDo->get('core.edit.state')) {
			<%
			if(IsContainColumn(table,"state"))
			{
			%>			
			JToolBarHelper::publish('<%=view.ToLower()%>.publish', 'JTOOLBAR_PUBLISH', true);
			JToolBarHelper::unpublish('<%=view.ToLower()%>.unpublish', 'JTOOLBAR_UNPUBLISH', true);
			JToolbarHelper::archiveList('<%=view.ToLower()%>.archive');
			JToolbarHelper::checkin('<%=view.ToLower()%>.checkin');
			<%
			}
			
			if(IsContainColumn(table,"featured"))
			{
			%>
			JToolBarHelper::custom('<%=view.ToLower()%>.featured', 'featured.png', 'featured_f2.png', 'JFEATURED', true);
			<%
			}
			%>
		}

		if ($this->state->get('filter.published') == -2 && $canDo->get('core.delete')) {
			JToolBarHelper::deleteList('', '<%=view.ToLower()%>.delete','JTOOLBAR_EMPTY_TRASH');
		}
		elseif ($canDo->get('core.edit.state')) {
			JToolBarHelper::trash('<%=view.ToLower()%>.trash');
		}
		
		// Add a batch button
		if ($user->authorise('core.create', '<%=ComponentName%>') && $user->authorise('core.edit', '<%=ComponentName%>') && $user->authorise('core.edit.state', '<%=ComponentName%>'))
		{
			JHtml::_('bootstrap.modal', 'collapseModal');
			$title = JText::_('JTOOLBAR_BATCH');

			// Instantiate a new JLayoutFile instance and render the batch button
			$layout = new JLayoutFile('joomla.toolbar.batch');

			$dhtml = $layout->render(array('title' => $title));
			$bar->appendButton('Custom', $dhtml, 'batch');
		}		

		if ($canDo->get('core.admin')) {
			JToolBarHelper::preferences('<%=ComponentName%>');
		}

		JToolBarHelper::help('JHELP_CONTENT_ARTICLE_MANAGER');
	}
	
	/**
	 * Returns an array of fields the table can be sorted by
	 *
	 * @return  array  Array containing the field name to sort by as the key and display text as value
	 *
	 * @since   3.0
	 */
	protected function getSortFields()
	{
		return array(
			'a.ordering'     => JText::_('JGRID_HEADING_ORDERING'),
			'a.state'        => JText::_('JSTATUS'),
			'a.title'        => JText::_('JGLOBAL_TITLE'),
			'category_title' => JText::_('JCATEGORY'),
			'access_level'   => JText::_('JGRID_HEADING_ACCESS'),
			'a.created_by'   => JText::_('JAUTHOR'),
			'language'       => JText::_('JGRID_HEADING_LANGUAGE'),
			'a.created'      => JText::_('JDATE'),
			'a.id'           => JText::_('JGRID_HEADING_ID'),
			'a.featured'     => JText::_('JFEATURED')
		);
	}	
}<%
		output.save(path, "o");
		output.clear();		
	}
%>
##|BODY_END
